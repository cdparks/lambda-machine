// Generated by psc-bundle 0.8.0.0
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Monoid ---------------------------------------------------------------------

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  //- Ord ------------------------------------------------------------------------

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };                                          

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Prelude"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Ord = function (__superclass_Prelude$dotEq_0, compare) {
      this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
      this.compare = compare;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };
  var Show = function (show) {
      this.show = show;
  };
  var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
  var unit = {};
  var top = function (dict) {
      return dict.top;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };                                                                     
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var otherwise = true;
  var not = function (dict) {
      return dict.not;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var $less$hash$greater = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return $less$dollar$greater(dictFunctor)(f)(fa);
          };
      };
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  }; 
  var eqString = new Eq($foreign.refEq);
  var ordString = new Ord(function () {
      return eqString;
  }, unsafeCompare);
  var eqNumber = new Eq($foreign.refEq);
  var ordNumber = new Ord(function () {
      return eqNumber;
  }, unsafeCompare);
  var eqInt = new Eq($foreign.refEq);
  var ordInt = new Ord(function () {
      return eqInt;
  }, unsafeCompare);
  var eqChar = new Eq($foreign.refEq);
  var ordChar = new Ord(function () {
      return eqChar;
  }, unsafeCompare);
  var eqBoolean = new Eq($foreign.refEq);
  var ordBoolean = new Ord(function () {
      return eqBoolean;
  }, unsafeCompare);
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (dictEq) {
      return eq(dictEq);
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var $$void = function (dictFunctor) {
      return function (fa) {
          return $less$dollar$greater(dictFunctor)($$const(unit))(fa);
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var $less = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $80 = compare(dictOrd)(a1)(a2);
              if ($80 instanceof LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var $less$eq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $81 = compare(dictOrd)(a1)(a2);
              if ($81 instanceof GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedBoolean = new Bounded(false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var $div$eq = function (dictEq) {
      return function (x) {
          return function (y) {
              return not(booleanAlgebraBoolean)($eq$eq(dictEq)(x)(y));
          };
      };
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $plus$plus = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["Show"] = Show;
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["Bounded"] = Bounded;
  exports["Ord"] = Ord;
  exports["Eq"] = Eq;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["unsafeCompare"] = unsafeCompare;
  exports["<="] = $less$eq;
  exports["<"] = $less;
  exports["compare"] = compare;
  exports["/="] = $div$eq;
  exports["=="] = $eq$eq;
  exports["eq"] = eq;
  exports["++"] = $plus$plus;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["void"] = $$void;
  exports["<#>"] = $less$hash$greater;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["ordBoolean"] = ordBoolean;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["boundedBoolean"] = boundedBoolean;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["showInt"] = showInt;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Alt = function (__superclass_Prelude$dotFunctor_0, alt) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.alt = alt;
  };                                         
  var alt = function (dict) {
      return dict.alt;
  };
  var $less$bar$greater = function (dictAlt) {
      return alt(dictAlt);
  };
  exports["Alt"] = Alt;
  exports["<|>"] = $less$bar$greater;
  exports["alt"] = alt;;
 
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];     
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;;
 
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];     
  var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
      this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
  };
  exports["Alternative"] = Alternative;;
 
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };               
  var monoidString = new Monoid(function () {
      return Prelude.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                   
  var isJust = maybe(false)(Prelude["const"](true));
  var functorMaybe = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Prelude.id(Prelude.categoryFn));
  };
  var applyMaybe = new Prelude.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Prelude["<$>"](functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 121, column 1 - line 145, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Prelude.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isJust"] = isJust;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $less$times = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
          };
      };
  };
  var $times$greater = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  exports["*>"] = $times$greater;
  exports["<*"] = $less$times;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];     
  var First = function (x) {
      return x;
  };
  var semigroupFirst = new Prelude.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });
  var runFirst = function (v) {
      return v;
  };
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  exports["First"] = First;
  exports["runFirst"] = runFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;;
 
})(PS["Data.Maybe.First"] = PS["Data.Maybe.First"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.acc)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["intercalate"] = intercalate;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 52, column 1 - line 56, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 28, column 1 - line 29, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  }; 
  var applyEither = new Prelude.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Prelude["<$>"](functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 92, column 1 - line 116, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeEither = new Prelude.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;;
 
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          return defer(dictLazy)(function (v) {
              return f(fix(dictLazy)(f));
          });
      };
  };
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
  exports["defer"] = defer;;
 
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["snd"] = snd;
  exports["fst"] = fst;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.replicate = function (n) {
    return function (v) {
      if (n < 1) return [];
      var r = new Array(n);
      for (var i = 0; i < n; i++) r[i] = v;
      return r;
    };
  };

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["unsafeThrow"] = $foreign.unsafeThrow;;
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];     
  var $colon = $foreign.cons;
  var uncons = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });                          
  var tail = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var singleton = function (a) {
      return [ a ];
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Prelude["<*>"]((dictAlternative["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())($colon)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt["<|>"]((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Prelude.pure(dictAlternative["__superclass_Prelude.Applicative_0"]())([  ]));
          };
      };
  };
  var head = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (v) {
          return new Data_Maybe.Just(x);
      };
  });
  exports["uncons"] = uncons;
  exports["tail"] = tail;
  exports["head"] = head;
  exports["many"] = many;
  exports["some"] = some;
  exports["singleton"] = singleton;
  exports["filter"] = $foreign.filter;
  exports["reverse"] = $foreign.reverse;
  exports["snoc"] = $foreign.snoc;
  exports["cons"] = $foreign.cons;
  exports["length"] = $foreign.length;
  exports["replicate"] = $foreign.replicate;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var semigroupList = new Prelude.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 1 - line 369, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy_v) {
              return function (__copy_acc) {
                  var v = __copy_v;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (v instanceof Nil) {
                          return acc;
                      };
                      if (v instanceof Cons) {
                          var __tco_v = v.value1;
                          var __tco_acc = new Cons(f(v.value0), acc);
                          v = __tco_v;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 731, column 1 - line 738, column 1: " + [ v.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
  };
  var toList = function (dictFoldable) {
      return fromFoldable(dictFoldable);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($365) {
                  return Prelude.append(dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f($365));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var length = Data_Foldable.foldl(foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);                                                   
  var applyList = new Prelude.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(v.value0)(v1))(Prelude["<*>"](applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Prelude.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["toList"] = toList;
  exports["reverse"] = reverse;
  exports["length"] = length;
  exports["fromFoldable"] = fromFoldable;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];     
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List.Nil.value;
      };
      if (v instanceof Two) {
          return Prelude["++"](Data_List.semigroupList)(values(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Prelude["++"](Data_List.semigroupList)(values(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value2))(Prelude["++"](Data_List.semigroupList)(values(v.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var toList = function (v) {
      if (v instanceof Leaf) {
          return Data_List.Nil.value;
      };
      if (v instanceof Two) {
          return Prelude["++"](Data_List.semigroupList)(toList(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(v.value1, v.value2)))(toList(v.value3)));
      };
      if (v instanceof Three) {
          return Prelude["++"](Data_List.semigroupList)(toList(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(v.value1, v.value2)))(Prelude["++"](Data_List.semigroupList)(toList(v.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(v.value4, v.value5)))(toList(v.value6)))));
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var size = function ($600) {
      return Data_List.length(values($600));
  };
  var lookup = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_v1) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v1 instanceof Leaf) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (v1 instanceof Two && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value1)) {
                      return new Data_Maybe.Just(v1.value2);
                  };
                  if (v1 instanceof Two && Prelude["<"](dictOrd)(v)(v1.value1)) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value0;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Two) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value3;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value1)) {
                      return new Data_Maybe.Just(v1.value2);
                  };
                  if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value4)) {
                      return new Data_Maybe.Just(v1.value5);
                  };
                  if (v1 instanceof Three && Prelude["<"](dictOrd)(v)(v1.value1)) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value0;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Three && (Prelude["<"](dictOrd)(v1.value1)(v) && Prelude["<="](dictOrd)(v)(v1.value4))) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value3;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Three) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value6;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List.Nil.value;
      };
      if (v instanceof Two) {
          return Prelude["++"](Data_List.semigroupList)(keys(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Prelude["++"](Data_List.semigroupList)(keys(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value1))(Prelude["++"](Data_List.semigroupList)(keys(v.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var functorMap = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Prelude.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Prelude.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Prelude.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Prelude.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Prelude.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_v1) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return v1;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoLeft) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoRight) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeLeft) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeMiddle) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1, v.value0.value3, v.value0.value4, v.value0.value5);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeRight) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, v1);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var insert = function (dictOrd) {
      var up = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return new Two(v1.value0, v1.value1, v1.value2, v1.value3);
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoLeft) {
                      return fromZipper(dictOrd)(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, v.value0.value0, v.value0.value1, v.value0.value2));
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoRight) {
                      return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0, v1.value1, v1.value2, v1.value3));
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeLeft) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2, v1.value3), v.value0.value0, v.value0.value1, new Two(v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5));
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeMiddle) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0), v1.value1, v1.value2, new Two(v1.value3, v.value0.value3, v.value0.value4, v.value0.value5));
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeRight) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3), v.value0.value4, v.value0.value5, new Two(v1.value0, v1.value1, v1.value2, v1.value3));
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.Map line 150, column 1 - line 151, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      var down = function (__copy_ctx) {
          return function (__copy_k) {
              return function (__copy_v) {
                  return function (__copy_v1) {
                      var ctx = __copy_ctx;
                      var k = __copy_k;
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v1 instanceof Leaf) {
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v1.value1)) {
                              return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                          };
                          if (v1 instanceof Two && Prelude["<"](dictOrd)(k)(v1.value1)) {
                              var __tco_ctx = new Data_List.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value0;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Two) {
                              var __tco_ctx = new Data_List.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v1.value1)) {
                              return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                          };
                          if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v1.value4)) {
                              return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                          };
                          if (v1 instanceof Three && Prelude["<"](dictOrd)(k)(v1.value1)) {
                              var __tco_ctx = new Data_List.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value0;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Three && (Prelude["<"](dictOrd)(v1.value1)(k) && Prelude["<="](dictOrd)(k)(v1.value4))) {
                              var __tco_ctx = new Data_List.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Three) {
                              var __tco_ctx = new Data_List.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value6;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.Map line 150, column 1 - line 151, column 1: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
          };
      };
      return down(Data_List.Nil.value);
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var fromList = function (dictOrd) {
      return fromFoldable(dictOrd)(Data_List.foldableList);
  };
  var $$delete = function (dictOrd) {
      var up = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return v1;
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoLeft && (v.value0.value2 instanceof Leaf && v1 instanceof Leaf))) {
                      return fromZipper(dictOrd)(v.value1)(new Two(Leaf.value, v.value0.value0, v.value0.value1, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoRight && (v.value0.value0 instanceof Leaf && v1 instanceof Leaf))) {
                      return fromZipper(dictOrd)(v.value1)(new Two(Leaf.value, v.value0.value1, v.value0.value2, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoLeft && v.value0.value2 instanceof Two)) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0, v.value0.value2.value1, v.value0.value2.value2, v.value0.value2.value3);
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoRight && v.value0.value0 instanceof Two)) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3, v.value0.value1, v.value0.value2, v1);
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoLeft && v.value0.value2 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0), v.value0.value2.value1, v.value0.value2.value2, new Two(v.value0.value2.value3, v.value0.value2.value4, v.value0.value2.value5, v.value0.value2.value6)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoRight && v.value0.value0 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(new Two(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3), v.value0.value0.value4, v.value0.value0.value5, new Two(v.value0.value0.value6, v.value0.value1, v.value0.value2, v1)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeLeft && (v.value0.value2 instanceof Leaf && (v.value0.value5 instanceof Leaf && v1 instanceof Leaf)))) {
                      return fromZipper(dictOrd)(v.value1)(new Three(Leaf.value, v.value0.value0, v.value0.value1, Leaf.value, v.value0.value3, v.value0.value4, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && (v.value0.value0 instanceof Leaf && (v.value0.value5 instanceof Leaf && v1 instanceof Leaf)))) {
                      return fromZipper(dictOrd)(v.value1)(new Three(Leaf.value, v.value0.value1, v.value0.value2, Leaf.value, v.value0.value3, v.value0.value4, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeRight && (v.value0.value0 instanceof Leaf && (v.value0.value3 instanceof Leaf && v1 instanceof Leaf)))) {
                      return fromZipper(dictOrd)(v.value1)(new Three(Leaf.value, v.value0.value1, v.value0.value2, Leaf.value, v.value0.value4, v.value0.value5, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeLeft && v.value0.value2 instanceof Two)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0, v.value0.value2.value1, v.value0.value2.value2, v.value0.value2.value3), v.value0.value3, v.value0.value4, v.value0.value5));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value0 instanceof Two)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(new Three(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3, v.value0.value1, v.value0.value2, v1), v.value0.value3, v.value0.value4, v.value0.value5));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value5 instanceof Two)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(v.value0.value0, v.value0.value1, v.value0.value2, new Three(v1, v.value0.value3, v.value0.value4, v.value0.value5.value0, v.value0.value5.value1, v.value0.value5.value2, v.value0.value5.value3)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeRight && v.value0.value3 instanceof Two)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(v.value0.value0, v.value0.value1, v.value0.value2, new Three(v.value0.value3.value0, v.value0.value3.value1, v.value0.value3.value2, v.value0.value3.value3, v.value0.value4, v.value0.value5, v1)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeLeft && v.value0.value2 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Three(new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0), v.value0.value2.value1, v.value0.value2.value2, new Two(v.value0.value2.value3, v.value0.value2.value4, v.value0.value2.value5, v.value0.value2.value6), v.value0.value3, v.value0.value4, v.value0.value5));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value0 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Three(new Two(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3), v.value0.value0.value4, v.value0.value0.value5, new Two(v.value0.value0.value6, v.value0.value1, v.value0.value2, v1), v.value0.value3, v.value0.value4, v.value0.value5));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value5 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, new Two(v1, v.value0.value3, v.value0.value4, v.value0.value5.value0), v.value0.value5.value1, v.value0.value5.value2, new Two(v.value0.value5.value3, v.value0.value5.value4, v.value0.value5.value5, v.value0.value5.value6)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeRight && v.value0.value3 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, new Two(v.value0.value3.value0, v.value0.value3.value1, v.value0.value3.value2, v.value0.value3.value3), v.value0.value3.value4, v.value0.value3.value5, new Two(v.value0.value3.value6, v.value0.value4, v.value0.value5, v1)));
                  };
                  return Data_Maybe_Unsafe.unsafeThrow("Impossible case in 'up'");
              };
          };
      };
      var removeMaxNode = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v1 instanceof Two && (v1.value0 instanceof Leaf && v1.value3 instanceof Leaf)) {
                      return up(v)(Leaf.value);
                  };
                  if (v1 instanceof Two) {
                      var __tco_v = new Data_List.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), v);
                      var __tco_v1 = v1.value3;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Three && (v1.value0 instanceof Leaf && (v1.value3 instanceof Leaf && v1.value6 instanceof Leaf))) {
                      return up(new Data_List.Cons(new TwoRight(Leaf.value, v1.value1, v1.value2), v))(Leaf.value);
                  };
                  if (v1 instanceof Three) {
                      var __tco_v = new Data_List.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), v);
                      var __tco_v1 = v1.value6;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Leaf) {
                      return Data_Maybe_Unsafe.unsafeThrow("Impossible case in 'removeMaxNode'");
                  };
                  throw new Error("Failed pattern match at Data.Map line 173, column 1 - line 174, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      var maxNode = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Two && v.value3 instanceof Leaf) {
                  return {
                      key: v.value1, 
                      value: v.value2
                  };
              };
              if (v instanceof Two) {
                  var __tco_v = v.value3;
                  v = __tco_v;
                  continue tco;
              };
              if (v instanceof Three && v.value6 instanceof Leaf) {
                  return {
                      key: v.value4, 
                      value: v.value5
                  };
              };
              if (v instanceof Three) {
                  var __tco_v = v.value6;
                  v = __tco_v;
                  continue tco;
              };
              if (v instanceof Leaf) {
                  return Data_Maybe_Unsafe.unsafeThrow("Impossible case in 'maxNode'");
              };
              throw new Error("Failed pattern match at Data.Map line 173, column 1 - line 174, column 1: " + [ v.constructor.name ]);
          };
      };
      var down = function (__copy_ctx) {
          return function (__copy_v) {
              return function (__copy_v1) {
                  var ctx = __copy_ctx;
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Leaf) {
                          return fromZipper(dictOrd)(ctx)(Leaf.value);
                      };
                      if (v1 instanceof Two && (v1.value0 instanceof Leaf && (v1.value3 instanceof Leaf && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value1)))) {
                          return up(ctx)(Leaf.value);
                      };
                      if (v1 instanceof Two) {
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value1)) {
                              var max = maxNode(v1.value0);
                              return removeMaxNode(new Data_List.Cons(new TwoLeft(max.key, max.value, v1.value3), ctx))(v1.value0);
                          };
                          if (Prelude["<"](dictOrd)(v)(v1.value1)) {
                              var __tco_ctx = new Data_List.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                              var __tco_v = v;
                              var __tco_v1 = v1.value0;
                              ctx = __tco_ctx;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (Prelude.otherwise) {
                              var __tco_ctx = new Data_List.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              var __tco_v = v;
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                      };
                      if (v1 instanceof Three && (v1.value0 instanceof Leaf && (v1.value3 instanceof Leaf && v1.value6 instanceof Leaf))) {
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value1)) {
                              return fromZipper(dictOrd)(ctx)(new Two(Leaf.value, v1.value4, v1.value5, Leaf.value));
                          };
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value4)) {
                              return fromZipper(dictOrd)(ctx)(new Two(Leaf.value, v1.value1, v1.value2, Leaf.value));
                          };
                      };
                      if (v1 instanceof Three) {
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value1)) {
                              var max = maxNode(v1.value0);
                              return removeMaxNode(new Data_List.Cons(new ThreeLeft(max.key, max.value, v1.value3, v1.value4, v1.value5, v1.value6), ctx))(v1.value0);
                          };
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value4)) {
                              var max = maxNode(v1.value3);
                              return removeMaxNode(new Data_List.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, max.key, max.value, v1.value6), ctx))(v1.value3);
                          };
                          if (Prelude["<"](dictOrd)(v)(v1.value1)) {
                              var __tco_ctx = new Data_List.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                              var __tco_v = v;
                              var __tco_v1 = v1.value0;
                              ctx = __tco_ctx;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (Prelude["<"](dictOrd)(v1.value1)(v) && Prelude["<"](dictOrd)(v)(v1.value4)) {
                              var __tco_ctx = new Data_List.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                              var __tco_v = v;
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (Prelude.otherwise) {
                              var __tco_ctx = new Data_List.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              var __tco_v = v;
                              var __tco_v1 = v1.value6;
                              ctx = __tco_ctx;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                      };
                      throw new Error("Failed pattern match at Data.Map line 173, column 1 - line 174, column 1: " + [ ctx.constructor.name, v.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return down(Data_List.Nil.value);
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var $588 = f(lookup(dictOrd)(k)(m));
                  if ($588 instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if ($588 instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)($588.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map line 235, column 1 - line 236, column 1: " + [ $588.constructor.name ]);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)(function ($601) {
                              return Data_Maybe.Just.create(Data_Maybe.maybe(v.value1)(f(v.value1))($601));
                          })(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List.foldableList)(go)(m2)(toList(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Prelude["const"]);
  };
  exports["size"] = size;
  exports["unionWith"] = unionWith;
  exports["union"] = union;
  exports["values"] = values;
  exports["keys"] = keys;
  exports["alter"] = alter;
  exports["member"] = member;
  exports["delete"] = $$delete;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["fromFoldable"] = fromFoldable;
  exports["lookup"] = lookup;
  exports["insert"] = insert;
  exports["empty"] = empty;
  exports["functorMap"] = functorMap;;
 
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.Unsafe

  exports.unsafeIndex = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
 
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  exports["unsafeIndex"] = $foreign.unsafeIndex;;
 
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Map = PS["Data.Map"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_Unsafe = PS["Data.Array.Unsafe"];
  var Data_Either = PS["Data.Either"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var $$Set = (function () {
      function Set(value0) {
          this.value0 = value0;
      };
      Set.create = function (value0) {
          return new Set(value0);
      };
      return Set;
  })();
  var union = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return new $$Set(Data_Map.union(dictOrd)(v.value0)(v1.value0));
          };
      };
  };
  var toList = function (v) {
      return Data_Map.keys(v.value0);
  };
  var size = function (v) {
      return Data_Map.size(v.value0);
  };
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map.member(dictOrd)(a)(v.value0);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return new $$Set(Data_Map.insert(dictOrd)(a)(Prelude.unit)(v.value0));
          };
      };
  };
  var empty = new $$Set(Data_Map.empty);
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return new $$Set(Data_Map["delete"](dictOrd)(a)(v.value0));
          };
      };
  };
  var difference = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              return Data_Foldable.foldl(Data_List.foldableList)(Prelude.flip($$delete(dictOrd)))(s1)(toList(s2));
          };
      };
  };
  exports["difference"] = difference;
  exports["union"] = union;
  exports["size"] = size;
  exports["toList"] = toList;
  exports["fromFoldable"] = fromFoldable;
  exports["member"] = member;
  exports["insert"] = insert;
  exports["empty"] = empty;;
 
})(PS["Data.Set"] = PS["Data.Set"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substr(n);
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Char

  exports.toString = function (c) {
    return c;
  };

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Char"];
  var Prelude = PS["Prelude"];
  exports["toCharCode"] = $foreign.toCharCode;
  exports["toString"] = $foreign.toString;;
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];                                          
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromChar = Data_Char.toString;                                                      
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["indexOf"] = indexOf;
  exports["fromChar"] = fromChar;
  exports["charAt"] = charAt;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["split"] = $foreign.split;
  exports["drop"] = $foreign.drop;
  exports["length"] = $foreign.length;
  exports["fromCharArray"] = $foreign.fromCharArray;;
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Generic


  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipAll = function(f) {
      return function(xs) {
          return function(ys) {
              var l = xs.length < ys.length ? xs.length : ys.length;
              for (var i = 0; i < l; i++) {
                  if (!f(xs[i])(ys[i])) {
                      return false;
                  }
              }
              return true;
          };
      };
  };

  exports.zipCompare = function(f) {
      return function(xs) {
          return function(ys) {
              var i = 0;
              var xlen = xs.length;
              var ylen = ys.length;
              while (i < xlen && i < ylen) {
                  var o = f(xs[i])(ys[i]);
                  if (o !== 0) {
                      return o;
                  }
                  i++;
              }
              if (xlen === ylen) {
                  return 0;
              } else if (xlen > ylen) {
                  return -1;
              } else {
                  return 1;
              }
          };
      };
  };
 
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $$Proxy = (function () {
      function Proxy() {

      };
      Proxy.value = new Proxy();
      return Proxy;
  })();
  exports["Proxy"] = $$Proxy;;
 
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Array = PS["Data.Array"];
  var Data_String = PS["Data.String"];
  var Type_Proxy = PS["Type.Proxy"];
  var Data_Monoid = PS["Data.Monoid"];     
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SigProd = (function () {
      function SigProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SigProd.create = function (value0) {
          return function (value1) {
              return new SigProd(value0, value1);
          };
      };
      return SigProd;
  })();
  var SigInt = (function () {
      function SigInt() {

      };
      SigInt.value = new SigInt();
      return SigInt;
  })();
  var SigString = (function () {
      function SigString() {

      };
      SigString.value = new SigString();
      return SigString;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  };
  var genericString = new Generic(function (v) {
      if (v instanceof SString) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigString.value;
  }, function (x) {
      return new SString(x);
  });
  var genericInt = new Generic(function (v) {
      if (v instanceof SInt) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigInt.value;
  }, function (x) {
      return new SInt(x);
  });
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };                                                         
  var eqGeneric = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof SProd && v1 instanceof SProd) {
              return v.value0 === v1.value0 && (Data_Array.length(v.value1) === Data_Array.length(v1.value1) && $foreign.zipAll(function (x) {
                  return function (y) {
                      return Prelude["=="](eqGeneric)(x(Prelude.unit))(y(Prelude.unit));
                  };
              })(v.value1)(v1.value1));
          };
          if (v instanceof SRecord && v1 instanceof SRecord) {
              var go = function (x) {
                  return function (y) {
                      return x.recLabel === y.recLabel && Prelude["=="](eqGeneric)(x.recValue(Prelude.unit))(y.recValue(Prelude.unit));
                  };
              };
              return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(go)(v.value0)(v1.value0);
          };
          if (v instanceof SInt && v1 instanceof SInt) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SNumber && v1 instanceof SNumber) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SBoolean && v1 instanceof SBoolean) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SChar && v1 instanceof SChar) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SString && v1 instanceof SString) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SArray && v1 instanceof SArray) {
              return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(function (x) {
                  return function (y) {
                      return Prelude["=="](eqGeneric)(x(Prelude.unit))(y(Prelude.unit));
                  };
              })(v.value0)(v1.value0);
          };
          return false;
      };
  });
  var gEq = function (dictGeneric) {
      return function (x) {
          return function (y) {
              return Prelude["=="](eqGeneric)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
          };
      };
  };
  var ordGeneric = new Prelude.Ord(function () {
      return eqGeneric;
  }, function (v) {
      return function (v1) {
          if (v instanceof SProd && v1 instanceof SProd) {
              var $118 = Prelude.compare(Prelude.ordString)(v.value0)(v1.value0);
              if ($118 instanceof Prelude.EQ) {
                  return Prelude.compare(Prelude.ordInt)(0)($foreign.zipCompare(function (x) {
                      return function (y) {
                          var $119 = Prelude.compare(ordGeneric)(x(Prelude.unit))(y(Prelude.unit));
                          if ($119 instanceof Prelude.EQ) {
                              return 0;
                          };
                          if ($119 instanceof Prelude.LT) {
                              return 1;
                          };
                          if ($119 instanceof Prelude.GT) {
                              return -1;
                          };
                          throw new Error("Failed pattern match: " + [ $119.constructor.name ]);
                      };
                  })(v.value1)(v1.value1));
              };
              return $118;
          };
          if (v instanceof SProd) {
              return Prelude.LT.value;
          };
          if (v1 instanceof SProd) {
              return Prelude.GT.value;
          };
          if (v instanceof SRecord && v1 instanceof SRecord) {
              var go = function (x) {
                  return function (y) {
                      var $128 = Prelude.compare(Prelude.ordString)(x.recLabel)(y.recLabel);
                      if ($128 instanceof Prelude.EQ) {
                          var $129 = Prelude.compare(ordGeneric)(x.recValue(Prelude.unit))(y.recValue(Prelude.unit));
                          if ($129 instanceof Prelude.EQ) {
                              return 0;
                          };
                          if ($129 instanceof Prelude.LT) {
                              return 1;
                          };
                          if ($129 instanceof Prelude.GT) {
                              return -1;
                          };
                          throw new Error("Failed pattern match at Data.Generic line 288, column 15 - line 295, column 5: " + [ $129.constructor.name ]);
                      };
                      if ($128 instanceof Prelude.LT) {
                          return 1;
                      };
                      if ($128 instanceof Prelude.GT) {
                          return -1;
                      };
                      throw new Error("Failed pattern match at Data.Generic line 288, column 15 - line 295, column 5: " + [ $128.constructor.name ]);
                  };
              };
              return Prelude.compare(Prelude.ordInt)(0)($foreign.zipCompare(go)(v.value0)(v1.value0));
          };
          if (v instanceof SRecord) {
              return Prelude.LT.value;
          };
          if (v1 instanceof SRecord) {
              return Prelude.GT.value;
          };
          if (v instanceof SInt && v1 instanceof SInt) {
              return Prelude.compare(Prelude.ordInt)(v.value0)(v1.value0);
          };
          if (v instanceof SInt) {
              return Prelude.LT.value;
          };
          if (v1 instanceof SInt) {
              return Prelude.GT.value;
          };
          if (v instanceof SBoolean && v1 instanceof SBoolean) {
              return Prelude.compare(Prelude.ordBoolean)(v.value0)(v1.value0);
          };
          if (v instanceof SBoolean) {
              return Prelude.LT.value;
          };
          if (v1 instanceof SBoolean) {
              return Prelude.GT.value;
          };
          if (v instanceof SNumber && v1 instanceof SNumber) {
              return Prelude.compare(Prelude.ordNumber)(v.value0)(v1.value0);
          };
          if (v instanceof SNumber) {
              return Prelude.LT.value;
          };
          if (v1 instanceof SNumber) {
              return Prelude.GT.value;
          };
          if (v instanceof SString && v1 instanceof SString) {
              return Prelude.compare(Prelude.ordString)(v.value0)(v1.value0);
          };
          if (v instanceof SString) {
              return Prelude.LT.value;
          };
          if (v1 instanceof SString) {
              return Prelude.GT.value;
          };
          if (v instanceof SChar && v1 instanceof SChar) {
              return Prelude.compare(Prelude.ordChar)(v.value0)(v1.value0);
          };
          if (v instanceof SChar) {
              return Prelude.LT.value;
          };
          if (v1 instanceof SChar) {
              return Prelude.GT.value;
          };
          if (v instanceof SArray && v1 instanceof SArray) {
              return Prelude.compare(Prelude.ordInt)(0)($foreign.zipCompare(function (x) {
                  return function (y) {
                      var $154 = Prelude.compare(ordGeneric)(x(Prelude.unit))(y(Prelude.unit));
                      if ($154 instanceof Prelude.EQ) {
                          return 0;
                      };
                      if ($154 instanceof Prelude.LT) {
                          return 1;
                      };
                      if ($154 instanceof Prelude.GT) {
                          return -1;
                      };
                      throw new Error("Failed pattern match: " + [ $154.constructor.name ]);
                  };
              })(v.value0)(v1.value0));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var gCompare = function (dictGeneric) {
      return function (x) {
          return function (y) {
              return Prelude.compare(ordGeneric)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
          };
      };
  };
  var anyProxy = (Type_Proxy["Proxy"]).value;
  exports["SigProd"] = SigProd;
  exports["SigInt"] = SigInt;
  exports["SigString"] = SigString;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["Generic"] = Generic;
  exports["gCompare"] = gCompare;
  exports["gEq"] = gEq;
  exports["fromSpine"] = fromSpine;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
  exports["genericInt"] = genericInt;
  exports["genericString"] = genericString;
  exports["eqGeneric"] = eqGeneric;
  exports["ordGeneric"] = ordGeneric;;
 
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array_Unsafe = PS["Data.Array.Unsafe"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_String = PS["Data.String"];
  var Data_Char = PS["Data.Char"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Set = PS["Data.Set"];
  var Data_Maybe = PS["Data.Maybe"];     
  var Name = (function () {
      function Name(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Name.create = function (value0) {
          return function (value1) {
              return new Name(value0, value1);
          };
      };
      return Name;
  })();
  var subscriptToInt = (function () {
      var toDigit = function (c) {
          if ("0" <= c && c <= "9") {
              return Data_Char.toCharCode(c) - Data_Char.toCharCode("0");
          };
          if ("\u2080" <= c && c <= "\u2089") {
              return Data_Char.toCharCode(c) - Data_Char.toCharCode("\u2080");
          };
          if (Prelude.otherwise) {
              return 0;
          };
          throw new Error("Failed pattern match at Data.Name line 49, column 3 - line 50, column 3: " + [ c.constructor.name ]);
      };
      var step = function (n) {
          return function (c) {
              return (10 * n | 0) + toDigit(c) | 0;
          };
      };
      return function ($23) {
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(step)(0)(Data_String.toCharArray($23));
      };
  })();
  var subscriptTable = [ "\u2080", "\u2081", "\u2082", "\u2083", "\u2084", "\u2085", "\u2086", "\u2087", "\u2088", "\u2089" ];
  var subscriptChars = Data_Set.union(Prelude.ordChar)(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Prelude.ordChar)([ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]))(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Prelude.ordChar)(subscriptTable));
  var next = function (v) {
      return new Name(v.value0, v.value1 + 1 | 0);
  };
  var name = Name.create;
  var isSubscriptChar = function (v) {
      return Data_Set.member(Prelude.ordChar)(v)(subscriptChars);
  };
  var genericName = new Data_Generic.Generic(function ($dollarx) {
      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "Data.Name.Name" && $dollarx.value1.length === 2)) {
          return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Name.create))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[0](Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)($dollarx.value1[1](Prelude.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Name.Name", [ {
          sigConstructor: "Data.Name.Name", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function ($dollarx) {
      return new Data_Generic.SProd("Data.Name.Name", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value0);
      }, function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericInt)($dollarx.value1);
      } ]);
  });
  var eqName = new Prelude.Eq(Data_Generic.gEq(genericName));
  var ordName = new Prelude.Ord(function () {
      return eqName;
  }, Data_Generic.gCompare(genericName));
  var digits = function (n) {
      if (n < 10) {
          return [ n ];
      };
      if (Prelude.otherwise) {
          return Prelude["<>"](Prelude.semigroupArray)(digits(n / 10 | 0))([ n % 10 ]);
      };
      throw new Error("Failed pattern match: " + [ n.constructor.name ]);
  };
  var intToSubscript = function ($24) {
      return Data_String.fromCharArray(Prelude.map(Prelude.functorArray)(Data_Array_Unsafe.unsafeIndex(subscriptTable))(digits($24)));
  };
  var showName = new Prelude.Show(function (v) {
      if (v.value1 === 0) {
          return v.value0;
      };
      if (Prelude.otherwise) {
          return v.value0 + intToSubscript(v.value1);
      };
      throw new Error("Failed pattern match at Data.Name line 32, column 1 - line 37, column 1: " + [ v.constructor.name ]);
  });
  exports["next"] = next;
  exports["name"] = name;
  exports["subscriptToInt"] = subscriptToInt;
  exports["intToSubscript"] = intToSubscript;
  exports["isSubscriptChar"] = isSubscriptChar;
  exports["genericName"] = genericName;
  exports["showName"] = showName;
  exports["eqName"] = eqName;
  exports["ordName"] = ordName;;
 
})(PS["Data.Name"] = PS["Data.Name"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Monoid = PS["Data.Monoid"];     
  var PrettyPrint = function (prettyPrint) {
      this.prettyPrint = prettyPrint;
  };
  var prettyPrint = function (dict) {
      return dict.prettyPrint;
  };
  var parensIf = function (cond) {
      return function (s) {
          if (cond) {
              return "(" + (s + ")");
          };
          if (!cond) {
              return s;
          };
          throw new Error("Failed pattern match at Data.PrettyPrint line 13, column 1 - line 14, column 1: " + [ cond.constructor.name ]);
      };
  };
  exports["PrettyPrint"] = PrettyPrint;
  exports["parensIf"] = parensIf;
  exports["prettyPrint"] = prettyPrint;;
 
})(PS["Data.PrettyPrint"] = PS["Data.PrettyPrint"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_PrettyPrint = PS["Data.PrettyPrint"];
  var Data_Name = PS["Data.Name"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Var = (function () {
      function Var(value0) {
          this.value0 = value0;
      };
      Var.create = function (value0) {
          return new Var(value0);
      };
      return Var;
  })();
  var Lambda = (function () {
      function Lambda(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Lambda.create = function (value0) {
          return function (value1) {
              return new Lambda(value0, value1);
          };
      };
      return Lambda;
  })();
  var Apply = (function () {
      function Apply(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Apply.create = function (value0) {
          return function (value1) {
              return new Apply(value0, value1);
          };
      };
      return Apply;
  })();
  var isLambda = function (v) {
      if (v instanceof Lambda) {
          return true;
      };
      return false;
  };
  var isComposite = function (v) {
      if (v instanceof Var) {
          return false;
      };
      return true;
  };
  var prettyPrintSyntax = new Data_PrettyPrint.PrettyPrint((function () {
      var walk = function (e) {
          if (e instanceof Var) {
              return Prelude.show(Data_Name.showName)(e.value0);
          };
          if (e instanceof Lambda) {
              return "\u03bb" + (Prelude.show(Data_Name.showName)(e.value0) + (". " + walk(e.value1)));
          };
          if (e instanceof Apply) {
              return Data_PrettyPrint.parensIf(isLambda(e.value0))(walk(e.value0)) + (" " + Data_PrettyPrint.parensIf(isComposite(e.value1))(walk(e.value1)));
          };
          throw new Error("Failed pattern match at Data.Syntax line 48, column 1 - line 58, column 84: " + [ e.constructor.name ]);
      };
      return walk;
  })());                                                               
  var defToSyntax = function (def) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(Lambda.create)(def.syntax)(def.args);
  };
  var defToString = function (def) {
      var prettyArgs = function (v) {
          if (v.length === 0) {
              return "";
          };
          return " " + Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(Prelude.map(Prelude.functorArray)(Prelude.show(Data_Name.showName))(v));
      };
      return Prelude.show(Data_Name.showName)(def.name) + (prettyArgs(def.args) + (" = " + Data_PrettyPrint.prettyPrint(prettyPrintSyntax)(def.syntax)));
  };
  exports["Var"] = Var;
  exports["Lambda"] = Lambda;
  exports["Apply"] = Apply;
  exports["defToString"] = defToString;
  exports["defToSyntax"] = defToSyntax;
  exports["prettyPrintSyntax"] = prettyPrintSyntax;;
 
})(PS["Data.Syntax"] = PS["Data.Syntax"] || {});
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["log"] = $foreign.log;;
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Alt = PS["Control.Alt"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Map = PS["Data.Map"];
  var Data_Set = PS["Data.Set"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Unsafe = PS["Data.Array.Unsafe"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Data_Syntax = PS["Data.Syntax"];
  var Data_PrettyPrint = PS["Data.PrettyPrint"];
  var Data_Name = PS["Data.Name"];
  var Data_List = PS["Data.List"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Bound = (function () {
      function Bound(value0) {
          this.value0 = value0;
      };
      Bound.create = function (value0) {
          return new Bound(value0);
      };
      return Bound;
  })();
  var Free = (function () {
      function Free(value0) {
          this.value0 = value0;
      };
      Free.create = function (value0) {
          return new Free(value0);
      };
      return Free;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var App = (function () {
      function App(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      App.create = function (value0) {
          return function (value1) {
              return new App(value0, value1);
          };
      };
      return App;
  })();
  var substitute = function (v) {
      var walk = function (index) {
          return function (e) {
              if (e instanceof Bound) {
                  if (e.value0 === index) {
                      return v;
                  };
                  if (Prelude.otherwise) {
                      return new Bound(e.value0);
                  };
              };
              if (e instanceof Free) {
                  return new Free(e.value0);
              };
              if (e instanceof Bind) {
                  return new Bind(e.value0, walk(index + 1 | 0)(e.value1));
              };
              if (e instanceof App) {
                  return new App(walk(index)(e.value0), walk(index)(e.value1));
              };
              throw new Error("Failed pattern match at Data.Expr line 162, column 1 - line 163, column 1: " + [ e.constructor.name ]);
          };
      };
      return walk(0);
  };
  var step = function (env) {
      return function (e) {
          if (e instanceof App && e.value0 instanceof Bind) {
              return Prelude["return"](Data_Maybe.applicativeMaybe)(substitute(e.value1)(e.value0.value1));
          };
          if (e instanceof App) {
              return Control_Alt["<|>"](Data_Maybe.altMaybe)(Prelude["<*>"](Data_Maybe.applyMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)(App.create)(step(env)(e.value0)))(Prelude.pure(Data_Maybe.applicativeMaybe)(e.value1)))(Prelude["<*>"](Data_Maybe.applyMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)(App.create)(Prelude.pure(Data_Maybe.applicativeMaybe)(e.value0)))(step(env)(e.value1)));
          };
          if (e instanceof Bind) {
              return Prelude["<$>"](Data_Maybe.functorMaybe)(Bind.create(e.value0))(step(env)(e.value1));
          };
          if (e instanceof Free) {
              return Data_Map.lookup(Data_Name.ordName)(e.value0)(env);
          };
          if (e instanceof Bound) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match: " + [ e.constructor.name ]);
      };
  };    
  var globalNames = function ($94) {
      return Data_Set.fromFoldable(Data_List.foldableList)(Data_Name.ordName)(Data_Map.keys($94));
  };                                                               
  var fresh = function (__copy_env) {
      return function (__copy_n) {
          var env = __copy_env;
          var n = __copy_n;
          tco: while (true) {
              if (Data_Set.member(Data_Name.ordName)(n)(env)) {
                  var __tco_env = env;
                  var __tco_n = Data_Name.next(n);
                  env = __tco_env;
                  n = __tco_n;
                  continue tco;
              };
              if (Prelude.otherwise) {
                  return new Data_Tuple.Tuple(Data_Set.insert(Data_Name.ordName)(n)(env), n);
              };
              throw new Error("Failed pattern match: " + [ env.constructor.name, n.constructor.name ]);
          };
      };
  };
  var freeVars = (function () {
      var walk = function (vars) {
          return function (e) {
              if (e instanceof Bound) {
                  return vars;
              };
              if (e instanceof Free) {
                  return Data_Set.insert(Data_Name.ordName)(e.value0)(vars);
              };
              if (e instanceof Bind) {
                  return walk(vars)(e.value1);
              };
              if (e instanceof App) {
                  return walk(walk(vars)(e.value0))(e.value1);
              };
              throw new Error("Failed pattern match at Data.Expr line 96, column 1 - line 97, column 1: " + [ e.constructor.name ]);
          };
      };
      return walk(Data_Set.empty);
  })();
  var namesReferencing = function (name) {
      var step1 = function (keys) {
          return function (v) {
              if (Data_Set.member(Data_Name.ordName)(name)(freeVars(v.value1))) {
                  return Data_Set.insert(Data_Name.ordName)(v.value0)(keys);
              };
              if (Prelude.otherwise) {
                  return keys;
              };
              throw new Error("Failed pattern match at Data.Expr line 119, column 3 - line 123, column 1: " + [ keys.constructor.name, v.constructor.name ]);
          };
      };
      return function ($95) {
          return Data_Foldable.foldl(Data_List.foldableList)(step1)(Data_Set.empty)(Data_Map.toList($95));
      };
  };
  var undefinedNames = function (expr) {
      return function (env) {
          return Data_Set.difference(Data_Name.ordName)(freeVars(expr))(globalNames(env));
      };
  };
  var formatNames = function ($96) {
      return Data_Foldable.intercalate(Data_List.foldableList)(Data_Monoid.monoidString)(", ")(Prelude.map(Data_List.functorList)(Prelude.show(Data_Name.showName))(Data_Set.toList($96)));
  };
  var formatUndefinedError = function (text) {
      return function (missing) {
          return "No top-level definition for " + (formatNames(missing) + (" referenced in\n" + text));
      };
  };
  var formatUndefinedWarning = function (name) {
      return function (names) {
          return "Deleted definition " + (Prelude.show(Data_Name.showName)(name) + (" is still referenced by " + formatNames(names)));
      };
  };
  var exprToSyntax = (function () {
      var loop = function (env) {
          return function (e) {
              if (e instanceof Bound) {
                  return new Data_Syntax.Var(env[e.value0]);
              };
              if (e instanceof Free) {
                  return new Data_Syntax.Var(e.value0);
              };
              if (e instanceof Bind) {
                  var env$prime = Data_Array.cons(e.value0)(env);
                  return new Data_Syntax.Lambda(e.value0, loop(env$prime)(e.value1));
              };
              if (e instanceof App) {
                  return new Data_Syntax.Apply(loop(env)(e.value0), loop(env)(e.value1));
              };
              throw new Error("Failed pattern match at Data.Expr line 81, column 1 - line 82, column 1: " + [ e.constructor.name ]);
          };
      };
      return loop([  ]);
  })();
  var alpha = function (e) {
      var loop = function (env) {
          return function (e1) {
              if (e1 instanceof Bound) {
                  return new Bound(e1.value0);
              };
              if (e1 instanceof Free) {
                  return new Free(e1.value0);
              };
              if (e1 instanceof Bind) {
                  var pair = fresh(env)(e1.value0);
                  return new Bind(Data_Tuple.snd(pair), loop(Data_Tuple.fst(pair))(e1.value1));
              };
              if (e1 instanceof App) {
                  return new App(loop(env)(e1.value0), loop(env)(e1.value1));
              };
              throw new Error("Failed pattern match at Data.Expr line 61, column 1 - line 62, column 1: " + [ e1.constructor.name ]);
          };
      };
      return loop(freeVars(e))(e);
  };
  var syntaxToExpr = (function () {
      var loop = function (env) {
          return function (a) {
              if (a instanceof Data_Syntax.Var) {
                  return Data_Maybe.maybe(new Free(a.value0))(Bound.create)(Data_Map.lookup(Data_Name.ordName)(a.value0)(env));
              };
              if (a instanceof Data_Syntax.Lambda) {
                  var env$prime = Data_Map.insert(Data_Name.ordName)(a.value0)(0)(Prelude.map(Data_Map.functorMap)(function (v) {
                      return v + 1 | 0;
                  })(env));
                  return new Bind(a.value0, loop(env$prime)(a.value1));
              };
              if (a instanceof Data_Syntax.Apply) {
                  return new App(loop(env)(a.value0), loop(env)(a.value1));
              };
              throw new Error("Failed pattern match at Data.Expr line 48, column 1 - line 49, column 1: " + [ a.constructor.name ]);
          };
      };
      return function ($97) {
          return alpha(loop(Data_Map.empty)($97));
      };
  })();
  exports["Bound"] = Bound;
  exports["Free"] = Free;
  exports["Bind"] = Bind;
  exports["App"] = App;
  exports["alpha"] = alpha;
  exports["step"] = step;
  exports["substitute"] = substitute;
  exports["formatUndefinedWarning"] = formatUndefinedWarning;
  exports["formatUndefinedError"] = formatUndefinedError;
  exports["namesReferencing"] = namesReferencing;
  exports["undefinedNames"] = undefinedNames;
  exports["globalNames"] = globalNames;
  exports["freeVars"] = freeVars;
  exports["exprToSyntax"] = exprToSyntax;
  exports["syntaxToExpr"] = syntaxToExpr;;
 
})(PS["Data.Expr"] = PS["Data.Expr"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Identity = function (x) {
      return x;
  };
  var runIdentity = function (v) {
      return v;
  };
  var functorIdentity = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Prelude.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Prelude.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Prelude.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Prelude.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["runIdentity"] = runIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;;
 
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_String = PS["Data.String"];
  var Data_Foldable = PS["Data.Foldable"];     
  var Position = (function () {
      function Position(value0) {
          this.value0 = value0;
      };
      Position.create = function (value0) {
          return new Position(value0);
      };
      return Position;
  })();
  var updatePosString = function (pos) {
      return function (str) {
          var updatePosChar = function (v) {
              return function (c) {
                  if (c === "\n") {
                      return new Position({
                          line: v.value0.line + 1 | 0, 
                          column: 1
                      });
                  };
                  if (c === "\r") {
                      return new Position({
                          line: v.value0.line + 1 | 0, 
                          column: 1
                      });
                  };
                  if (c === "\t") {
                      return new Position({
                          line: v.value0.line, 
                          column: (v.value0.column + 8 | 0) - (v.value0.column - 1) % 8
                      });
                  };
                  return new Position({
                      line: v.value0.line, 
                      column: v.value0.column + 1 | 0
                  });
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos)(Data_String.split("")(str));
      };
  }; 
  var initialPos = new Position({
      line: 1, 
      column: 1
  });
  exports["Position"] = Position;
  exports["updatePosString"] = updatePosString;
  exports["initialPos"] = initialPos;;
 
})(PS["Text.Parsing.Parser.Pos"] = PS["Text.Parsing.Parser.Pos"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];     
  var ParseError = (function () {
      function ParseError(value0) {
          this.value0 = value0;
      };
      ParseError.create = function (value0) {
          return new ParseError(value0);
      };
      return ParseError;
  })();
  var PState = (function () {
      function PState(value0) {
          this.value0 = value0;
      };
      PState.create = function (value0) {
          return new PState(value0);
      };
      return PState;
  })();
  var ParserT = function (x) {
      return x;
  };
  var unParserT = function (v) {
      return v;
  }; 
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(unParserT(p)(s))(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(v.result);
              });
          };
      };
  };
  var runParser = function (s) {
      return function ($54) {
          return Data_Identity.runIdentity(runParserT(Data_Identity.monadIdentity)(new PState({
              input: s, 
              position: Text_Parsing_Parser_Pos.initialPos
          }))($54));
      };
  };
  var parseFailed = function (s) {
      return function (pos) {
          return function (message) {
              return {
                  input: s, 
                  consumed: false, 
                  result: new Data_Either.Left(new ParseError({
                      message: message, 
                      position: pos
                  })), 
                  position: pos
              };
          };
      };
  }; 
  var lazyParserT = new Control_Lazy.Lazy(function (f) {
      return ParserT(function (s) {
          return unParserT(f(Prelude.unit))(s);
      });
  });
  var functorParserT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return function (p) {
              var f$prime = function (o) {
                  return {
                      input: o.input, 
                      result: Prelude["<$>"](Data_Either.functorEither)(f)(o.result), 
                      consumed: o.consumed, 
                      position: o.position
                  };
              };
              return ParserT(function (s) {
                  return Prelude["<$>"](dictFunctor)(f$prime)(unParserT(p)(s));
              });
          };
      });
  };
  var fail = function (dictMonad) {
      return function (message) {
          return ParserT(function (v) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(parseFailed(v.value0.input)(v.value0.position)(message));
          });
      };
  };
  var monadParserT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeParserT(dictMonad);
      }, function () {
          return bindParserT(dictMonad);
      });
  };
  var bindParserT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyParserT(dictMonad);
      }, function (p) {
          return function (f) {
              var updateConsumedFlag = function (c) {
                  return function (o) {
                      return {
                          input: o.input, 
                          consumed: c || o.consumed, 
                          result: o.result, 
                          position: o.position
                      };
                  };
              };
              return ParserT(function (s) {
                  return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(unParserT(p)(s))(function (o) {
                      if (o.result instanceof Data_Either.Left) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())({
                              input: o.input, 
                              result: new Data_Either.Left(o.result.value0), 
                              consumed: o.consumed, 
                              position: o.position
                          });
                      };
                      if (o.result instanceof Data_Either.Right) {
                          return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(updateConsumedFlag(o.consumed))(unParserT(f(o.result.value0))(new PState({
                              input: o.input, 
                              position: o.position
                          })));
                      };
                      throw new Error("Failed pattern match: " + [ o.result.constructor.name ]);
                  });
              });
          };
      });
  };
  var applyParserT = function (dictMonad) {
      return new Prelude.Apply(function () {
          return functorParserT(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
      }, Prelude.ap(monadParserT(dictMonad)));
  };
  var applicativeParserT = function (dictMonad) {
      return new Prelude.Applicative(function () {
          return applyParserT(dictMonad);
      }, function (a) {
          return ParserT(function (v) {
              return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())({
                  input: v.value0.input, 
                  result: new Data_Either.Right(a), 
                  consumed: false, 
                  position: v.value0.position
              });
          });
      });
  };
  var altParserT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorParserT(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
      }, function (p1) {
          return function (p2) {
              return ParserT(function (s) {
                  return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(unParserT(p1)(s))(function (o) {
                      if (o.result instanceof Data_Either.Left && !o.consumed) {
                          return unParserT(p2)(s);
                      };
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(o);
                  });
              });
          };
      });
  };
  var plusParserT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altParserT(dictMonad);
      }, fail(dictMonad)("No alternative"));
  };
  var alternativeParserT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return plusParserT(dictMonad);
      }, function () {
          return applicativeParserT(dictMonad);
      });
  };
  exports["ParserT"] = ParserT;
  exports["PState"] = PState;
  exports["ParseError"] = ParseError;
  exports["parseFailed"] = parseFailed;
  exports["fail"] = fail;
  exports["runParser"] = runParser;
  exports["runParserT"] = runParserT;
  exports["unParserT"] = unParserT;
  exports["functorParserT"] = functorParserT;
  exports["applyParserT"] = applyParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["altParserT"] = altParserT;
  exports["plusParserT"] = plusParserT;
  exports["alternativeParserT"] = alternativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadParserT"] = monadParserT;
  exports["lazyParserT"] = lazyParserT;;
 
})(PS["Text.Parsing.Parser"] = PS["Text.Parsing.Parser"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_List = PS["Data.List"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Apply = PS["Control.Apply"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var $$try = function (dictFunctor) {
      return function (p) {
          var try$prime = function (v) {
              return function (v1) {
                  return function (v2) {
                      if (v2.result instanceof Data_Either.Left) {
                          return {
                              input: v, 
                              result: v2.result, 
                              consumed: false, 
                              position: v1
                          };
                      };
                      return v2;
                  };
              };
          };
          return Text_Parsing_Parser.ParserT(function (v) {
              return Prelude["<$>"](dictFunctor)(try$prime(v.value0.input)(v.value0.position))(Text_Parsing_Parser.unParserT(p)(new Text_Parsing_Parser.PState({
                  input: v.value0.input, 
                  position: v.value0.position
              })));
          });
      };
  };
  var between = function (dictMonad) {
      return function (open) {
          return function (close) {
              return function (p) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(open)(function () {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(close)(function () {
                              return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
                          });
                      });
                  });
              };
          };
      };
  };
  exports["try"] = $$try;
  exports["between"] = between;;
 
})(PS["Text.Parsing.Parser.Combinators"] = PS["Text.Parsing.Parser.Combinators"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_String = PS["Data.String"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Char = PS["Data.Char"];
  var Data_Array = PS["Data.Array"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];     
  var string = function (dictMonad) {
      return function (str) {
          return Text_Parsing_Parser.ParserT(function (v) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                  var $16 = Data_String.indexOf(str)(v.value0.input);
                  if ($16 instanceof Data_Maybe.Just && $16.value0 === 0) {
                      return {
                          consumed: true, 
                          input: Data_String.drop(Data_String.length(str))(v.value0.input), 
                          result: new Data_Either.Right(str), 
                          position: Text_Parsing_Parser_Pos.updatePosString(v.value0.position)(str)
                      };
                  };
                  return Text_Parsing_Parser.parseFailed(v.value0.input)(v.value0.position)("Expected " + str);
              })());
          });
      };
  };
  var eof = function (dictMonad) {
      return Text_Parsing_Parser.ParserT(function (v) {
          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
              if (v.value0.input === "") {
                  return {
                      consumed: false, 
                      input: v.value0.input, 
                      result: new Data_Either.Right(Prelude.unit), 
                      position: v.value0.position
                  };
              };
              return Text_Parsing_Parser.parseFailed(v.value0.input)(v.value0.position)("Expected EOF");
          })());
      });
  };
  var anyChar = function (dictMonad) {
      return Text_Parsing_Parser.ParserT(function (v) {
          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
              var $27 = Data_String.charAt(0)(v.value0.input);
              if ($27 instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.parseFailed(v.value0.input)(v.value0.position)("Unexpected EOF");
              };
              if ($27 instanceof Data_Maybe.Just) {
                  return {
                      consumed: true, 
                      input: Data_String.drop(1)(v.value0.input), 
                      result: new Data_Either.Right($27.value0), 
                      position: Text_Parsing_Parser_Pos.updatePosString(v.value0.position)(Data_Char.toString($27.value0))
                  };
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String line 33, column 1 - line 34, column 1: " + [ $27.constructor.name ]);
          })());
      });
  };
  var satisfy = function (dictMonad) {
      return function (f) {
          return Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictMonad))(function (v) {
              var $33 = f(v);
              if ($33) {
                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
              };
              if (!$33) {
                  return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String.fromChar(v) + "' did not satisfy predicate"));
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String line 40, column 1 - line 41, column 1: " + [ $33.constructor.name ]);
          }));
      };
  };
  var whiteSpace = function (dictMonad) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(satisfy(dictMonad)(function (c) {
          return c === "\n" || (c === "\r" || (c === " " || c === "\t"));
      })))(function (v) {
          return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String.fromCharArray(v));
      });
  };
  var skipSpaces = function (dictMonad) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(whiteSpace(dictMonad))(function () {
          return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Prelude.unit);
      });
  };
  exports["skipSpaces"] = skipSpaces;
  exports["whiteSpace"] = whiteSpace;
  exports["satisfy"] = satisfy;
  exports["anyChar"] = anyChar;
  exports["string"] = string;
  exports["eof"] = eof;;
 
})(PS["Text.Parsing.Parser.String"] = PS["Text.Parsing.Parser.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Either.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Either.Unsafe"] = PS["Data.Either.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Either.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];     
  var fromRight = function (v) {
      if (v instanceof Data_Either.Right) {
          return v.value0;
      };
      return $foreign.unsafeThrow("Data.Either.Unsafe.fromRight called on Left value");
  };
  exports["fromRight"] = fromRight;;
 
})(PS["Data.Either.Unsafe"] = PS["Data.Either.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_String = PS["Data.String"];
  var Data_Either = PS["Data.Either"];
  var Data_Either_Unsafe = PS["Data.Either.Unsafe"];
  var Data_Syntax = PS["Data.Syntax"];
  var Data_Name = PS["Data.Name"];
  var Data_Identity = PS["Data.Identity"];     
  var token = function (p) {
      return Control_Apply["<*"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(p)(Text_Parsing_Parser_String.skipSpaces(Data_Identity.monadIdentity));
  };
  var parseSubscript = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($31) {
      return Data_Name.subscriptToInt(Data_String.fromCharArray($31));
  })(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.satisfy(Data_Identity.monadIdentity)(Data_Name.isSubscriptChar)));
  var parsePrimes = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Array.length)(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.satisfy(Data_Identity.monadIdentity)(function (v) {
      return v === "'";
  })));
  var parseAll = function (p) {
      return function (s) {
          return Text_Parsing_Parser.runParser(s)(Control_Apply["<*"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Data_Identity.monadIdentity))(p))(Text_Parsing_Parser_String.eof(Data_Identity.monadIdentity)));
      };
  };
  var unsafeParse = function (p) {
      return function (s) {
          return Data_Either_Unsafe.fromRight(parseAll(p)(s));
      };
  };
  var parens = Text_Parsing_Parser_Combinators.between(Data_Identity.monadIdentity)(token(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("(")))(token(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(")")));
  var isLower = function (c) {
      return "a" <= c && c <= "z";
  };
  var isDigit = function (c) {
      return "0" <= c && c <= "9";
  };
  var formatParseError = function (text) {
      return function (v) {
          var caretLine = Data_String.fromCharArray(Data_Array.replicate(v.value0.position.value0.column - 1)(" ")) + "^";
          return "Parse error: " + (v.value0.message + (" at column " + (Prelude.show(Prelude.showInt)(v.value0.position.value0.column) + ("\n" + (text + ("\n" + caretLine))))));
      };
  };
  var firstChar = function (c) {
      return isLower(c) || c === "_";
  };
  var bodyChar = function (c) {
      return isLower(c) || (isDigit(c) || c === "-");
  };
  var parseName = token(Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.satisfy(Data_Identity.monadIdentity)(firstChar))(function (v) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.satisfy(Data_Identity.monadIdentity)(bodyChar)))(function (v1) {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("?"))(Prelude.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))("")))(function (v2) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(parsePrimes)(parseSubscript))(function (v3) {
                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Name.name(Data_String.fromCharArray(Prelude["<>"](Prelude.semigroupArray)([ v ])(v1)) + v2)(v3));
              });
          });
      });
  }));
  var parseVar = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Syntax.Var.create)(parseName);
  var parseSyntax = (function () {
      var parseApply = function (p) {
          var parseLambda = Prelude["<*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Syntax.Lambda.create)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(token(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("\\"))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("\u03bb"))))(parseName)))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(token(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(".")))(p));
          var parseAtom = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(parseLambda)(parseVar))(parens(p));
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseAtom)(function (v) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(parseAtom))(function (v1) {
                  if (v1.length === 0) {
                      return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v);
                  };
                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Syntax.Apply.create)(v)(v1));
              });
          });
      };
      return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(parseApply);
  })();
  var parseDefinition = Prelude["<*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Prelude["<*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
      return function (v1) {
          return function (v2) {
              return {
                  name: v, 
                  args: v1, 
                  syntax: v2
              };
          };
      };
  })(parseName))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(parseName)))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(token(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("=")))(parseSyntax));
  var parseEither = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Either.Left.create)(parseDefinition)))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Either.Right.create)(parseSyntax));
  exports["formatParseError"] = formatParseError;
  exports["unsafeParse"] = unsafeParse;
  exports["parseEither"] = parseEither;
  exports["parseSyntax"] = parseSyntax;
  exports["parseDefinition"] = parseDefinition;
  exports["parseAll"] = parseAll;;
 
})(PS["Data.Parse"] = PS["Data.Parse"] || {});
(function(exports) {
  // module Control.Monad.Eff.Save

  exports.saveTextAs = function(text) {
    return function(filename) {
      return function() {
        var blob = new Blob([text], {type: 'text/plain;charset=utf-8'});
        saveAs(blob, filename);
        return {};
      }
    }
  }

 
})(PS["Control.Monad.Eff.Save"] = PS["Control.Monad.Eff.Save"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Save"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["saveTextAs"] = $foreign.saveTextAs;;
 
})(PS["Control.Monad.Eff.Save"] = PS["Control.Monad.Eff.Save"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Unsafe

  exports.unsafeInterleaveEff = function (f) {
    return f;
  };
 
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["unsafeInterleaveEff"] = $foreign.unsafeInterleaveEff;;
 
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module React

  exports.getProps = function(ctx) {
      return function() {
          return ctx.props;
      };
  };

  exports.getChildren = function(ctx) {
    return function() {
      var children = ctx.props.children;

      var result = [];

      React.Children.forEach(children, function(child){
        result.push(child);
      });

      return result;
    };
  };

  exports.writeState = function(ctx) {
      return function(state) {
          return function() {
              ctx.replaceState({
                  state: state
              });
              return function() {
                  return state;
              }
          };
      };
  };

  exports.readState = function(ctx) {
      return function() {
          return ctx.state.state;
      };
  };

  exports.createClass = function(ss) {
      var result = {};
      for (var s in ss) {
          if (ss.hasOwnProperty(s)) {
            if (s === "displayName") {
              result[s] = ss[s];
            }
            else if (s === "componentWillReceiveProps") {
              result[s] = (function(impl) {
                  return function(nextProps) {
                      return impl(this)(nextProps)();
                  }
              })(ss[s]);
            }
            else if (s === "shouldComponentUpdate") {
              result[s] = (function(impl) {
                  return function(nextProps, nextState) {
                      return impl(this)(nextProps)(nextState.state)();
                  }
              })(ss[s]);
            }
            else if (s === "componentWillUpdate") {
              result[s] = (function(impl) {
                  return function(nextProps, nextState) {
                      return impl(this)(nextProps)(nextState.state)();
                  }
              })(ss[s]);
            }
            else if (s === "componentDidUpdate") {
              result[s] = (function(impl) {
                  return function(prevProps, prevState) {
                      return impl(this)(prevProps)(prevState.state)();
                  }
              })(ss[s]);
            }
            else {
              result[s] = (function(impl) {
                  return function() {
                      return impl(this)();
                  }
              })(ss[s]);
            }
          }
      }
      result.getInitialState = function() {
          return {
              state: ss.getInitialState(this)()
          };
      };
      return React.createClass(result);
  };

  exports.handle = function(f) {
      return function(e) {
          return f(e)();
      };
  };

  exports.createFactory = function(clazz) {
    return React.createFactory(clazz);
  };

  exports.render = function(element) {
    return function(container) {
      return function() {
        return React.render(element, container);
      }
    };
  };                                            
 
})(PS["React"] = PS["React"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["React"];
  var Prelude = PS["Prelude"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var spec$prime = function (getInitialState) {
      return function (renderFn) {
          return {
              render: renderFn, 
              displayName: "", 
              getInitialState: getInitialState, 
              componentWillMount: function (v) {
                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
              }, 
              componentDidMount: function (v) {
                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
              }, 
              componentWillReceiveProps: function (v) {
                  return function (v1) {
                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
                  };
              }, 
              shouldComponentUpdate: function (v) {
                  return function (v1) {
                      return function (v2) {
                          return Prelude["return"](Control_Monad_Eff.applicativeEff)(true);
                      };
                  };
              }, 
              componentWillUpdate: function (v) {
                  return function (v1) {
                      return function (v2) {
                          return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
                      };
                  };
              }, 
              componentDidUpdate: function (v) {
                  return function (v1) {
                      return function (v2) {
                          return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
                      };
                  };
              }, 
              componentWillUnmount: function (v) {
                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
              }
          };
      };
  };
  var spec = function (state) {
      return spec$prime(function (v) {
          return Prelude.pure(Control_Monad_Eff.applicativeEff)(state);
      });
  };
  exports["spec"] = spec;
  exports["render"] = $foreign.render;
  exports["createFactory"] = $foreign.createFactory;
  exports["createClass"] = $foreign.createClass;
  exports["handle"] = $foreign.handle;
  exports["writeState"] = $foreign.writeState;
  exports["readState"] = $foreign.readState;
  exports["getChildren"] = $foreign.getChildren;
  exports["getProps"] = $foreign.getProps;;
 
})(PS["React"] = PS["React"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var React = PS["React"];     
  var GetState = (function () {
      function GetState(value0) {
          this.value0 = value0;
      };
      GetState.create = function (value0) {
          return new GetState(value0);
      };
      return GetState;
  })();
  var SetState = (function () {
      function SetState(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetState.create = function (value0) {
          return function (value1) {
              return new SetState(value0, value1);
          };
      };
      return SetState;
  })();
  var Wait = (function () {
      function Wait(value0) {
          this.value0 = value0;
      };
      Wait.create = function (value0) {
          return new Wait(value0);
      };
      return Wait;
  })();
  var Pure = (function () {
      function Pure(value0) {
          this.value0 = value0;
      };
      Pure.create = function (value0) {
          return new Pure(value0);
      };
      return Pure;
  })();
  var Impure = (function () {
      function Impure(value0) {
          this.value0 = value0;
      };
      Impure.create = function (value0) {
          return new Impure(value0);
      };
      return Impure;
  })();
  var setState = function (s) {
      return Impure.create(new SetState(s, new Pure(Prelude.unit)));
  };
  var runAction = function ($$this) {
      var go = function (v) {
          if (v instanceof Pure) {
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
          };
          if (v instanceof Impure && v.value0 instanceof GetState) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
                  var v1 = React.readState($$this)();
                  return go(v.value0.value0(v1))();
              });
          };
          if (v instanceof Impure && v.value0 instanceof SetState) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
                  React.writeState($$this)(v.value0.value0)();
                  return go(v.value0.value1)();
              });
          };
          if (v instanceof Impure && v.value0 instanceof Wait) {
              return v.value0.value0(go);
          };
          throw new Error("Failed pattern match at Thermite.Action line 37, column 1 - line 41, column 1: " + [ v.constructor.name ]);
      };
      return go;
  };
  var getState = Impure.create(new GetState(Pure.create));
  var functorActionF = new Prelude.Functor(function (f) {
      return function (v) {
          if (v instanceof GetState) {
              return new GetState(function ($33) {
                  return f(v.value0($33));
              });
          };
          if (v instanceof SetState) {
              return new SetState(v.value0, f(v.value1));
          };
          if (v instanceof Wait) {
              return new Wait(function (k) {
                  return v.value0(function ($34) {
                      return k(f($34));
                  });
              });
          };
          throw new Error("Failed pattern match at Thermite.Action line 24, column 1 - line 34, column 1: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var functorAction = new Prelude.Functor(function (f) {
      return function (v) {
          if (v instanceof Pure) {
              return new Pure(f(v.value0));
          };
          if (v instanceof Impure) {
              return new Impure(Prelude["<$>"](functorActionF)(Prelude["<$>"](functorAction)(f))(v.value0));
          };
          throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var async = function (c) {
      return Impure.create(new Wait(function (k) {
          return c(function ($35) {
              return k(Pure.create($35));
          });
      }));
  };
  var monadAction = new Prelude.Monad(function () {
      return applicativeAction;
  }, function () {
      return bindAction;
  });
  var bindAction = new Prelude.Bind(function () {
      return applyAction;
  }, function (v) {
      return function (f) {
          if (v instanceof Pure) {
              return f(v.value0);
          };
          if (v instanceof Impure) {
              return Impure.create(Prelude["<#>"](functorActionF)(v.value0)(function (a) {
                  return Prelude[">>="](bindAction)(a)(f);
              }));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, f.constructor.name ]);
      };
  });
  var applyAction = new Prelude.Apply(function () {
      return functorAction;
  }, Prelude.ap(monadAction));
  var applicativeAction = new Prelude.Applicative(function () {
      return applyAction;
  }, Pure.create);
  var modifyState = function (f) {
      return Prelude.bind(bindAction)(getState)(function (v) {
          return setState(f(v));
      });
  };
  exports["async"] = async;
  exports["modifyState"] = modifyState;
  exports["setState"] = setState;
  exports["getState"] = getState;
  exports["runAction"] = runAction;
  exports["functorAction"] = functorAction;
  exports["applyAction"] = applyAction;
  exports["applicativeAction"] = applicativeAction;
  exports["bindAction"] = bindAction;
  exports["monadAction"] = monadAction;;
 
})(PS["Thermite.Action"] = PS["Thermite.Action"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function(x) { return x; }
 
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;;
 
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Thermite_Action = PS["Thermite.Action"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var React = PS["React"];
  var simpleSpec = function (initialState) {
      return function (performAction) {
          return function (render) {
              return {
                  initialState: initialState, 
                  performAction: performAction, 
                  render: render, 
                  componentWillMount: Data_Maybe.Nothing.value, 
                  displayName: Data_Maybe.Nothing.value
              };
          };
      };
  };
  var displayName = function (name) {
      return function (v) {
          var $6 = {};
          for (var $7 in v) {
              if (v.hasOwnProperty($7)) {
                  $6[$7] = v[$7];
              };
          };
          $6.displayName = new Data_Maybe.Just(name);
          return $6;
      };
  };
  var createClass = function (v) {
      var displayName_ = Data_Maybe.fromMaybe("")(v.displayName);
      var dispatch = function ($$this) {
          return function (action) {
              return function __do() {
                  var v1 = React.getProps($$this)();
                  return Thermite_Action.runAction($$this)(Unsafe_Coerce.unsafeCoerce(v.performAction(v1)(action)))();
              };
          };
      };
      var render = function ($$this) {
          return Prelude["<*>"](Control_Monad_Eff.applyEff)(Prelude["<*>"](Control_Monad_Eff.applyEff)(Prelude["<$>"](Control_Monad_Eff.functorEff)(v.render(dispatch($$this)))(React.readState($$this)))(React.getProps($$this)))(React.getChildren($$this));
      };
      var componentWillMount_ = function (ctx) {
          return Data_Maybe.maybe(Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit))(function ($16) {
              return Control_Monad_Eff_Unsafe.unsafeInterleaveEff(dispatch(ctx)($16));
          })(v.componentWillMount);
      };
      return React.createClass((function () {
          var $10 = {};
          for (var $11 in React.spec(v.initialState)(render)) {
              if ((React.spec(v.initialState)(render)).hasOwnProperty($11)) {
                  $10[$11] = (React.spec(v.initialState)(render))[$11];
              };
          };
          $10.displayName = displayName_;
          $10.componentWillMount = componentWillMount_;
          return $10;
      })());
  };
  var componentWillMount = function (action) {
      return function (v) {
          var $14 = {};
          for (var $15 in v) {
              if (v.hasOwnProperty($15)) {
                  $14[$15] = v[$15];
              };
          };
          $14.componentWillMount = new Data_Maybe.Just(action);
          return $14;
      };
  };
  exports["displayName"] = displayName;
  exports["createClass"] = createClass;
  exports["componentWillMount"] = componentWillMount;
  exports["simpleSpec"] = simpleSpec;;
 
})(PS["Thermite"] = PS["Thermite"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module React.DOM

  function mkProps(props) {
      var result = {};

      for (var i = 0, len = props.length; i < len; i++) {
          var prop = props[i];

          for (var key in prop) {
              if (prop.hasOwnProperty(key)) {
                  result[key] = prop[key];
              }
          }
      }

      return result;
  };

  exports.mkDOM = function(tagName) {
      return function(props) {
          return function(children) {
              return React.createElement(tagName, props.length > 0 ? mkProps(props) : null, children);
          }
      }
  };

  exports.text = function(text) {
      return text;
  };
 
})(PS["React.DOM"] = PS["React.DOM"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module React.DOM.Props

  exports.unsafeMkProps = function(key) {
      return function(value) {
          var result = {};
          result[key] = value;
          return result;
      };
  };
 
})(PS["React.DOM.Props"] = PS["React.DOM.Props"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["React.DOM.Props"];
  var Prelude = PS["Prelude"];
  var React = PS["React"];                    
  var value = $foreign.unsafeMkProps("value");  
  var placeholder = $foreign.unsafeMkProps("placeholder");
  var onKeyUp = function (f) {
      return $foreign.unsafeMkProps("onKeyUp")(React.handle(f));
  };
  var onClick = function (f) {
      return $foreign.unsafeMkProps("onClick")(React.handle(f));
  };
  var onChange = function (f) {
      return $foreign.unsafeMkProps("onChange")(React.handle(f));
  };                                                
  var href = $foreign.unsafeMkProps("href");      
  var className = $foreign.unsafeMkProps("className");
  exports["onClick"] = onClick;
  exports["onChange"] = onChange;
  exports["onKeyUp"] = onKeyUp;
  exports["value"] = value;
  exports["placeholder"] = placeholder;
  exports["href"] = href;
  exports["className"] = className;;
 
})(PS["React.DOM.Props"] = PS["React.DOM.Props"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["React.DOM"];
  var Prelude = PS["Prelude"];
  var React = PS["React"];
  var React_DOM_Props = PS["React.DOM.Props"];
  var span = $foreign.mkDOM("span");  
  var pre = $foreign.mkDOM("pre");
  var input = $foreign.mkDOM("input");
  var hr = $foreign.mkDOM("hr");
  var hr$prime = hr([  ]);
  var h4 = $foreign.mkDOM("h4");
  var h4$prime = h4([  ]);
  var h3 = $foreign.mkDOM("h3");
  var h3$prime = h3([  ]);
  var h2 = $foreign.mkDOM("h2");
  var h2$prime = h2([  ]);
  var div = $foreign.mkDOM("div");
  var div$prime = div([  ]);      
  var button = $foreign.mkDOM("button");
  var a = $foreign.mkDOM("a");
  exports["span"] = span;
  exports["pre"] = pre;
  exports["input"] = input;
  exports["hr'"] = hr$prime;
  exports["hr"] = hr;
  exports["h4'"] = h4$prime;
  exports["h4"] = h4;
  exports["h3'"] = h3$prime;
  exports["h3"] = h3;
  exports["h2'"] = h2$prime;
  exports["h2"] = h2;
  exports["div'"] = div$prime;
  exports["div"] = div;
  exports["button"] = button;
  exports["a"] = a;
  exports["text"] = $foreign.text;;
 
})(PS["React.DOM"] = PS["React.DOM"] || {});
(function(exports) {
  /* global exports */
  "use strict";          

  exports.nullable = function(a, r, f) {
      return a == null ? r : f(a);
  }; 
 
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];                              
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;;
 
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // jshint maxparams: 1
  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
 
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];                                                                   
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_String = PS["Data.String"];     
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Prelude.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
          };
          return new Data_Either.Left(new TypeMismatch(tag, $foreign.tagOf(value)));
      };
  }; 
  var readString = unsafeReadTagged("String");
  var readNumber = unsafeReadTagged("Number");
  var readInt = function (value) {
      var error = Data_Either.Left.create(new TypeMismatch("Int", $foreign.tagOf(value)));
      var fromNumber = function ($30) {
          return Data_Maybe.maybe(error)(Prelude.pure(Data_Either.applicativeEither))(Data_Int.fromNumber($30));
      };
      return Data_Either.either(Prelude["const"](error))(fromNumber)(readNumber(value));
  };
  exports["TypeMismatch"] = TypeMismatch;
  exports["readInt"] = readInt;
  exports["readNumber"] = readNumber;
  exports["readString"] = readString;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["typeOf"] = $foreign.typeOf;
  exports["toForeign"] = $foreign.toForeign;;
 
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Contravariant = function (cmap) {
      this.cmap = cmap;
  };
  var cmap = function (dict) {
      return dict.cmap;
  };
  exports["Contravariant"] = Contravariant;
  exports["cmap"] = cmap;;
 
})(PS["Data.Functor.Contravariant"] = PS["Data.Functor.Contravariant"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Const = function (x) {
      return x;
  };
  var getConst = function (v) {
      return v;
  };
  var functorConst = new Prelude.Functor(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var contravariantConst = new Data_Functor_Contravariant.Contravariant(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var applyConst = function (dictSemigroup) {
      return new Prelude.Apply(function () {
          return functorConst;
      }, function (v) {
          return function (v1) {
              return Prelude["<>"](dictSemigroup)(v)(v1);
          };
      });
  };
  var applicativeConst = function (dictMonoid) {
      return new Prelude.Applicative(function () {
          return applyConst(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, function (v) {
          return Data_Monoid.mempty(dictMonoid);
      });
  };
  exports["Const"] = Const;
  exports["getConst"] = getConst;
  exports["functorConst"] = functorConst;
  exports["applyConst"] = applyConst;
  exports["applicativeConst"] = applicativeConst;
  exports["contravariantConst"] = contravariantConst;;
 
})(PS["Data.Const"] = PS["Data.Const"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foreign.Index

  // jshint maxparams: 4
  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };
 
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foreign.Index"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(new Data_Either.Left(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))), Prelude.pure(Data_Either.applicativeEither), k, value);
      };
  };
  var prop = unsafeReadProp;
  exports["prop"] = prop;;
 
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Const = PS["Data.Const"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Foreign_Keys = PS["Data.Foreign.Keys"];
  var getMap = function (dictMonoid) {
      return function (f) {
          return function (g) {
              return function ($30) {
                  return Data_Const.getConst(g(Data_Const.contravariantConst)(Data_Const.applicativeConst(dictMonoid))(function ($31) {
                      return Data_Const.Const(f($31));
                  })($30));
              };
          };
      };
  };
  var get = function (g) {
      return function ($32) {
          return Data_Maybe_First.runFirst(getMap(Data_Maybe_First.monoidFirst)(function ($33) {
              return Data_Maybe_First.First(Data_Maybe.Just.create($33));
          })(function (dictContravariant) {
              return function (dictApplicative) {
                  return g(dictContravariant)(dictApplicative);
              };
          })($32));
      };
  };
  var coerce = function (dictContravariant) {
      return function (dictFunctor) {
          var absurd = function (__copy_a) {
              var a = __copy_a;
              tco: while (true) {
                  var __tco_a = a;
                  a = __tco_a;
                  continue tco;
              };
          };
          return function ($34) {
              return Prelude.map(dictFunctor)(absurd)(Data_Functor_Contravariant.cmap(dictContravariant)(absurd)($34));
          };
      };
  };
  var getter = function (f) {
      return function (dictContravariant) {
          return function (dictApplicative) {
              return function (g) {
                  return function (s) {
                      var $27 = f(s);
                      if ($27 instanceof Data_Either.Left) {
                          return coerce(dictContravariant)((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude.pure(dictApplicative)(Prelude.unit));
                      };
                      if ($27 instanceof Data_Either.Right) {
                          return coerce(dictContravariant)((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g($27.value0));
                      };
                      throw new Error("Failed pattern match at Data.Foreign.Lens line 54, column 1 - line 55, column 1: " + [ $27.constructor.name ]);
                  };
              };
          };
      };
  };
  var $$int = function (dictContravariant) {
      return function (dictApplicative) {
          return getter(Data_Foreign.readInt)(dictContravariant)(dictApplicative);
      };
  };
  var prop = function (p) {
      return function (dictContravariant) {
          return function (dictApplicative) {
              return getter(Data_Foreign_Index.prop(p))(dictContravariant)(dictApplicative);
          };
      };
  };
  var string = function (dictContravariant) {
      return function (dictApplicative) {
          return getter(Data_Foreign.readString)(dictContravariant)(dictApplicative);
      };
  };
  exports["prop"] = prop;
  exports["int"] = $$int;
  exports["string"] = string;
  exports["getMap"] = getMap;
  exports["get"] = get;
  exports["getter"] = getter;;
 
})(PS["Data.Foreign.Lens"] = PS["Data.Foreign.Lens"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Lens = PS["Data.Foreign.Lens"];     
  var getValue = function ($4) {
      return Data_Maybe.fromMaybe("")(Data_Foreign_Lens.get(function (dictContravariant) {
          return function (dictApplicative) {
              return function ($5) {
                  return Data_Foreign_Lens.prop("target")(dictContravariant)(dictApplicative)(Data_Foreign_Lens.prop("value")(dictContravariant)(dictApplicative)(Data_Foreign_Lens.string(dictContravariant)(dictApplicative)($5)));
              };
          };
      })(Data_Foreign.toForeign($4)));
  };
  var getKeyCode = function ($6) {
      return Data_Maybe.fromMaybe(0)(Data_Foreign_Lens.get(function (dictContravariant) {
          return function (dictApplicative) {
              return function ($7) {
                  return Data_Foreign_Lens.prop("keyCode")(dictContravariant)(dictApplicative)(Data_Foreign_Lens["int"](dictContravariant)(dictApplicative)($7));
              };
          };
      })(Data_Foreign.toForeign($6)));
  };
  exports["getKeyCode"] = getKeyCode;
  exports["getValue"] = getValue;;
 
})(PS["Component.Event"] = PS["Component.Event"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Array = PS["Data.Array"];
  var Data_List = PS["Data.List"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Map = PS["Data.Map"];
  var Data_Set = PS["Data.Set"];
  var Data_Name = PS["Data.Name"];
  var Data_Syntax = PS["Data.Syntax"];
  var Data_Expr = PS["Data.Expr"];
  var Data_Parse = PS["Data.Parse"];
  var Data_PrettyPrint = PS["Data.PrettyPrint"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Save = PS["Control.Monad.Eff.Save"];
  var Thermite = PS["Thermite"];
  var Thermite_Action = PS["Thermite.Action"];
  var React = PS["React"];
  var React_DOM = PS["React.DOM"];
  var React_DOM_Props = PS["React.DOM.Props"];
  var Component_Event = PS["Component.Event"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Warning = (function () {
      function Warning() {

      };
      Warning.value = new Warning();
      return Warning;
  })();
  var Danger = (function () {
      function Danger() {

      };
      Danger.value = new Danger();
      return Danger;
  })();
  var DoNothing = (function () {
      function DoNothing() {

      };
      DoNothing.value = new DoNothing();
      return DoNothing;
  })();
  var NewText = (function () {
      function NewText(value0) {
          this.value0 = value0;
      };
      NewText.create = function (value0) {
          return new NewText(value0);
      };
      return NewText;
  })();
  var ParseText = (function () {
      function ParseText() {

      };
      ParseText.value = new ParseText();
      return ParseText;
  })();
  var Reduce = (function () {
      function Reduce(value0) {
          this.value0 = value0;
      };
      Reduce.create = function (value0) {
          return new Reduce(value0);
      };
      return Reduce;
  })();
  var DismissAlert = (function () {
      function DismissAlert() {

      };
      DismissAlert.value = new DismissAlert();
      return DismissAlert;
  })();
  var Remove = (function () {
      function Remove(value0) {
          this.value0 = value0;
      };
      Remove.create = function (value0) {
          return new Remove(value0);
      };
      return Remove;
  })();
  var Clear = (function () {
      function Clear() {

      };
      Clear.value = new Clear();
      return Clear;
  })();
  var Save = (function () {
      function Save() {

      };
      Save.value = new Save();
      return Save;
  })();
  var showLevel = new Prelude.Show(function (v) {
      if (v instanceof Warning) {
          return "warning";
      };
      if (v instanceof Danger) {
          return "danger";
      };
      throw new Error("Failed pattern match at Component.App line 39, column 1 - line 43, column 1: " + [ v.constructor.name ]);
  });
  var renderSyntax = function (syntax) {
      return React_DOM.h4([ React_DOM_Props.className("text-muted") ])([ React_DOM.text(syntax) ]);
  };
  var renderHistory = function (hs) {
      var $14 = Data_Array.uncons(hs);
      if ($14 instanceof Data_Maybe.Nothing) {
          return [  ];
      };
      if ($14 instanceof Data_Maybe.Just) {
          return Data_Array.cons(React_DOM["h4'"]([ React_DOM.text($14.value0.head) ]))(Prelude.map(Prelude.functorArray)(renderSyntax)($14.value0.tail));
      };
      throw new Error("Failed pattern match at Component.App line 311, column 1 - line 312, column 1: " + [ $14.constructor.name ]);
  };
  var renderExprs = function (send) {
      return function (history) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return [  ];
              };
              if (v instanceof Data_Maybe.Just) {
                  return [ React_DOM["h3'"]([ React_DOM.text("Evaluation") ]), React_DOM.div([ React_DOM_Props.className("col-sm-12") ])([ React_DOM.div([ React_DOM_Props.className("btn-group pull-right") ])([ React_DOM.button([ React_DOM_Props.className("btn btn-default"), React_DOM_Props.onClick(function (v1) {
                      return send(new Reduce(v.value0));
                  }) ])([ React_DOM.text("Step") ]), React_DOM.button([ React_DOM_Props.className("btn btn-default"), React_DOM_Props.onClick(function (v1) {
                      return send(Clear.value);
                  }) ])([ React_DOM.text("Clear") ]), React_DOM.button([ React_DOM_Props.className("btn btn-default"), React_DOM_Props.onClick(function (v1) {
                      return send(Save.value);
                  }) ])([ React_DOM.text("Save") ]) ]), React_DOM.div([ React_DOM_Props.className("hide-overflow") ])([ React_DOM.div([ React_DOM_Props.className("scroll-overflow monospace-font") ])(renderHistory(history)) ]) ]) ];
              };
              throw new Error("Failed pattern match at Component.App line 278, column 1 - line 279, column 1: " + [ send.constructor.name, history.constructor.name, v.constructor.name ]);
          };
      };
  };
  var renderDef = function (send) {
      return function (def) {
          return React_DOM["h4'"]([ React_DOM.div([ React_DOM_Props.className("glyphicon glyphicon-remove"), React_DOM_Props.onClick(function (v) {
              return send(new Remove(def.name));
          }) ])([  ]), React_DOM.text(" " + Data_Syntax.defToString(def)) ]);
      };
  };
  var renderDefs = function (send) {
      return function (definitions) {
          return [ React_DOM["h3'"]([ React_DOM.text("Definitions") ]), React_DOM.div([ React_DOM_Props.className("monospace-font col-sm-12") ])(Prelude.map(Prelude.functorArray)(renderDef(send))(definitions)) ];
      };
  };
  var reduce = function (expr) {
      return function (s) {
          var $26 = Data_Expr.step(s.env)(expr);
          if ($26 instanceof Data_Maybe.Nothing) {
              return s;
          };
          if ($26 instanceof Data_Maybe.Just) {
              var expr$prime$prime = Data_Expr.alpha($26.value0);
              var $27 = {};
              for (var $28 in s) {
                  if (s.hasOwnProperty($28)) {
                      $27[$28] = s[$28];
                  };
              };
              $27.history = Data_Array.cons(Data_PrettyPrint.prettyPrint(Data_Syntax.prettyPrintSyntax)(Data_Expr.exprToSyntax(expr$prime$prime)))(s.history);
              $27.expr = new Data_Maybe.Just(expr$prime$prime);
              return $27;
          };
          throw new Error("Failed pattern match at Component.App line 167, column 1 - line 168, column 1: " + [ $26.constructor.name ]);
      };
  };
  var initialDefs = Prelude.map(Prelude.functorArray)(Data_Parse.unsafeParse(Data_Parse.parseDefinition))([ "i x = x", "k x _ = y", "fix f = (\u03bbx. f (x x)) (\u03bby. f (y y))", "true t _ = t", "false _ f = f", "and x y = x y false", "or x y = x true y" ]);
  var initialEnv = (function () {
      var fromDef = function (def) {
          return new Data_Tuple.Tuple(def.name, Data_Expr.syntaxToExpr(Data_Syntax.defToSyntax(def)));
      };
      return Data_Map.fromList(Data_Name.ordName)(Data_List.toList(Data_Foldable.foldableArray)(Prelude.map(Prelude.functorArray)(fromDef)(initialDefs)));
  })();
  var initialState = {
      text: "", 
      expr: Data_Maybe.Nothing.value, 
      history: [  ], 
      defs: initialDefs, 
      env: initialEnv, 
      error: Data_Maybe.Nothing.value
  };
  var header = React_DOM.div([ React_DOM_Props.className("page-header") ])([ React_DOM["h2'"]([ React_DOM.text("Lambda Machine") ]) ]);
  var handleKeyPress = function (e) {
      var $30 = Component_Event.getKeyCode(e);
      if ($30 === 13) {
          return ParseText.value;
      };
      return DoNothing.value;
  };
  var handleChangeEvent = function ($66) {
      return NewText.create(Component_Event.getValue($66));
  };
  var input = function (send) {
      return function (value) {
          return React_DOM.div([ React_DOM_Props.className("col-sm-12") ])([ React_DOM.div([ React_DOM_Props.className("input-group") ])([ React_DOM.input([ React_DOM_Props.className("form-control monospace-font"), React_DOM_Props.placeholder("<definition> or <expression>"), React_DOM_Props.value(value), React_DOM_Props.onKeyUp(function ($67) {
              return send(handleKeyPress($67));
          }), React_DOM_Props.onChange(function ($68) {
              return send(handleChangeEvent($68));
          }) ])([  ]), React_DOM.span([ React_DOM_Props.className("input-group-btn") ])([ React_DOM.button([ React_DOM_Props.className("btn btn-default"), React_DOM_Props.onClick(function (v) {
              return send(ParseText.value);
          }) ])([ React_DOM.text("Parse") ]) ]) ]) ]);
      };
  };
  var footer = React_DOM["div'"]([ React_DOM["hr'"]([  ]), React_DOM.a([ React_DOM_Props.href("https://github.com/cdparks/lambda-machine"), React_DOM_Props.className("pull-right") ])([ React_DOM.text("Source on GitHub") ]) ]);
  var fail = function (message) {
      return function (s) {
          var $32 = {};
          for (var $33 in s) {
              if (s.hasOwnProperty($33)) {
                  $32[$33] = s[$33];
              };
          };
          $32.error = new Data_Maybe.Just(new Data_Tuple.Tuple(Danger.value, message));
          return $32;
      };
  };
  var deleteByName = function (name) {
      return Data_Array.filter(function ($69) {
          return (function (v) {
              return Prelude["/="](Data_Name.eqName)(v)(name);
          })((function (v) {
              return v.name;
          })($69));
      });
  };
  var remove = function (name) {
      return function (s) {
          var env$prime = Data_Map["delete"](Data_Name.ordName)(name)(s.env);
          var names = Data_Expr.namesReferencing(name)(env$prime);
          var error = (function () {
              var $34 = Data_Set.size(names) === 0;
              if ($34) {
                  return Data_Maybe.Nothing.value;
              };
              if (!$34) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(Warning.value, Data_Expr.formatUndefinedWarning(name)(names)));
              };
              throw new Error("Failed pattern match at Component.App line 134, column 1 - line 135, column 1: " + [ $34.constructor.name ]);
          })();
          var $35 = {};
          for (var $36 in s) {
              if (s.hasOwnProperty($36)) {
                  $35[$36] = s[$36];
              };
          };
          $35.defs = deleteByName(name)(s.defs);
          $35.env = env$prime;
          $35.error = error;
          return $35;
      };
  };
  var clear = function (s) {
      var $37 = {};
      for (var $38 in s) {
          if (s.hasOwnProperty($38)) {
              $37[$38] = s[$38];
          };
      };
      $37.history = Data_Maybe.maybe([  ])(function ($70) {
          return Data_Array.singleton(Data_PrettyPrint.prettyPrint(Data_Syntax.prettyPrintSyntax)(Data_Expr.exprToSyntax($70)));
      })(s.expr);
      return $37;
  };
  var alert = function (send) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          if (v instanceof Data_Maybe.Just) {
              return [ React_DOM.div([ React_DOM_Props.className("col-sm-12") ])([ React_DOM.pre([ React_DOM_Props.className("alert alert-" + Prelude.show(showLevel)(v.value0.value0)) ])([ React_DOM.span([ React_DOM_Props.className("glyphicon glyphicon-remove pull-right"), React_DOM_Props.onClick(function (v1) {
                  return send(DismissAlert.value);
              }) ])([  ]), React_DOM.text(v.value0.value1) ]) ]) ];
          };
          throw new Error("Failed pattern match at Component.App line 219, column 1 - line 220, column 1: " + [ send.constructor.name, v.constructor.name ]);
      };
  };
  var render = function (send) {
      return function (state) {
          return function (props) {
              return function (v) {
                  return React_DOM.div([ React_DOM_Props.className("container") ])([ React_DOM.div([ React_DOM_Props.className("row") ])([ header ]), React_DOM.div([ React_DOM_Props.className("row") ])(alert(send)(state.error)), React_DOM.div([ React_DOM_Props.className("row") ])([ input(send)(state.text) ]), React_DOM.div([ React_DOM_Props.className("row") ])(renderDefs(send)(state.defs)), React_DOM.div([ React_DOM_Props.className("row") ])(renderExprs(send)(state.history)(state.expr)), React_DOM.div([ React_DOM_Props.className("row") ])([ footer ]) ]);
              };
          };
      };
  };
  var addExpr = function (syntax) {
      return function (s) {
          var history = [ Data_PrettyPrint.prettyPrint(Data_Syntax.prettyPrintSyntax)(syntax) ];
          var expr = new Data_Maybe.Just(Data_Expr.syntaxToExpr(syntax));
          var $45 = {};
          for (var $46 in s) {
              if (s.hasOwnProperty($46)) {
                  $45[$46] = s[$46];
              };
          };
          $45.text = "";
          $45.history = history;
          $45.expr = expr;
          return $45;
      };
  };
  var addDef = function (def) {
      return function (s) {
          var expr = Data_Expr.syntaxToExpr(Data_Syntax.defToSyntax(def));
          var missing = Data_Expr.undefinedNames(expr)(Data_Map["delete"](Data_Name.ordName)(def.name)(s.env));
          var env = Data_Map.insert(Data_Name.ordName)(def.name)(expr)(s.env);
          var defs = Data_Array.snoc(deleteByName(def.name)(s.defs))(def);
          var $47 = Data_Set.size(missing) === 0;
          if ($47) {
              var $48 = {};
              for (var $49 in s) {
                  if (s.hasOwnProperty($49)) {
                      $48[$49] = s[$49];
                  };
              };
              $48.text = "";
              $48.defs = defs;
              $48.env = env;
              return $48;
          };
          if (!$47) {
              return fail(Data_Expr.formatUndefinedError(s.text)(missing))(s);
          };
          throw new Error("Failed pattern match at Component.App line 147, column 1 - line 148, column 1: " + [ $47.constructor.name ]);
      };
  };
  var parse = function (s) {
      if (s.text === "") {
          return s;
      };
      var $51 = Data_Parse.parseAll(Data_Parse.parseEither)(s.text);
      if ($51 instanceof Data_Either.Left) {
          return fail(Data_Parse.formatParseError(s.text)($51.value0))(s);
      };
      if ($51 instanceof Data_Either.Right && $51.value0 instanceof Data_Either.Left) {
          return addDef($51.value0.value0)(s);
      };
      if ($51 instanceof Data_Either.Right && $51.value0 instanceof Data_Either.Right) {
          return addExpr($51.value0.value0)(s);
      };
      throw new Error("Failed pattern match at Component.App line 122, column 1 - line 123, column 1: " + [ $51.constructor.name ]);
  };
  var update = function (props) {
      return function (action) {
          if (action instanceof DoNothing) {
              return Prelude["return"](Thermite_Action.applicativeAction)(Prelude.unit);
          };
          if (action instanceof NewText) {
              return Thermite_Action.modifyState(function (s) {
                  var $58 = {};
                  for (var $59 in s) {
                      if (s.hasOwnProperty($59)) {
                          $58[$59] = s[$59];
                      };
                  };
                  $58.text = action.value0;
                  $58.error = Data_Maybe.Nothing.value;
                  return $58;
              });
          };
          if (action instanceof DismissAlert) {
              return Thermite_Action.modifyState(function (s) {
                  var $61 = {};
                  for (var $62 in s) {
                      if (s.hasOwnProperty($62)) {
                          $61[$62] = s[$62];
                      };
                  };
                  $61.error = Data_Maybe.Nothing.value;
                  return $61;
              });
          };
          if (action instanceof Remove) {
              return Thermite_Action.modifyState(remove(action.value0));
          };
          if (action instanceof ParseText) {
              return Thermite_Action.modifyState(parse);
          };
          if (action instanceof Reduce) {
              return Thermite_Action.modifyState(reduce(action.value0));
          };
          if (action instanceof Clear) {
              return Thermite_Action.modifyState(clear);
          };
          if (action instanceof Save) {
              return Prelude.bind(Thermite_Action.bindAction)(Thermite_Action.getState)(function (v) {
                  return Thermite_Action.async(function (k) {
                      var text = Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("\n")(Prelude["<>"](Prelude.semigroupArray)(Prelude.map(Prelude.functorArray)(Data_Syntax.defToString)(v.defs))(Data_Array.reverse(v.history)));
                      return function __do() {
                          Control_Monad_Eff_Save.saveTextAs(text)("evaluation.txt")();
                          return k(Prelude.unit)();
                      };
                  });
              });
          };
          throw new Error("Failed pattern match at Component.App line 94, column 1 - line 95, column 1: " + [ action.constructor.name ]);
      };
  };
  var appClass = Thermite.createClass(Thermite.simpleSpec(initialState)(update)(render));
  exports["appClass"] = appClass;;
 
})(PS["Component.App"] = PS["Component.App"] || {});
(function(exports) {
  /* global exports, window */
  "use strict";

  // module DOM.HTML

  exports.window = function () {
    return window;
  };
 
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                  
  var htmlElementToElement = Unsafe_Coerce.unsafeCoerce;
  exports["htmlElementToElement"] = htmlElementToElement;;
 
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;;
 
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.HTML.Document

  exports.body = function (doc) {
    return function () {
      return doc.body;
    };
  };
 
})(PS["DOM.HTML.Document"] = PS["DOM.HTML.Document"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.HTML.Document"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["body"] = $foreign.body;;
 
})(PS["DOM.HTML.Document"] = PS["DOM.HTML.Document"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.HTML.Window

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
 
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["document"] = $foreign.document;;
 
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Component_App = PS["Component.App"];
  var React = PS["React"];
  var DOM = PS["DOM"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Document = PS["DOM.HTML.Document"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_Types = PS["DOM.Node.Types"];     
  var body = function __do() {
      var v = DOM_HTML.window();
      var v1 = DOM_HTML_Window.document(v)();
      var v2 = Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)(DOM_HTML_Document.body(v1))();
      return Prelude["<$>"](Data_Maybe.functorMaybe)(DOM_HTML_Types.htmlElementToElement)(v2);
  };
  var main = function __do() {
      var v = body();
      if (v instanceof Data_Maybe.Nothing) {
          return Control_Monad_Eff_Console.log("No body element")();
      };
      if (v instanceof Data_Maybe.Just) {
          React.render(React.createFactory(Component_App.appClass)(Prelude.unit))(v.value0)();
          return Prelude.unit;
      };
      throw new Error("Failed pattern match at Main line 29, column 1 - line 30, column 1: " + [ v.constructor.name ]);
  };
  exports["main"] = main;
  exports["body"] = body;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();
